<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/api/upload/webp/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/upload/webp/route.ts" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;import { WebPService } from '@/lib/image/webp-service';&#10;import { writeFile } from 'fs/promises';&#10;import { join } from 'path';&#10;import { v4 as uuidv4 } from 'uuid';&#10;import { mkdir } from 'fs/promises';&#10;&#10;export const config = {&#10;  api: {&#10;    bodyParser: false,&#10;  },&#10;};&#10;&#10;/**&#10; * Yüklenen dosyaları WebP formatına dönüştüren API endpoint'i&#10; */&#10;export async function POST(request: NextRequest) {&#10;  try {&#10;    // Formdata'yı işle&#10;    const formData = await request.formData();&#10;    const files = formData.getAll('files') as File[];&#10;    &#10;    if (!files || files.length === 0) {&#10;      return NextResponse.json(&#10;        { error: 'Dosya bulunamadı.' },&#10;        { status: 400 }&#10;      );&#10;    }&#10;    &#10;    // Parametreleri al&#10;    const width = formData.get('width') ? parseInt(formData.get('width') as string) : undefined;&#10;    const height = formData.get('height') ? parseInt(formData.get('height') as string) : undefined;&#10;    const quality = formData.get('quality') ? parseInt(formData.get('quality') as string) : 85;&#10;    const generateThumbnail = formData.get('generateThumbnail') === 'true';&#10;    &#10;    // Yükleme dizinini oluştur&#10;    const uploadDir = join(process.cwd(), 'public', 'uploads');&#10;    await mkdir(uploadDir, { recursive: true });&#10;    &#10;    // Her dosyayı işle&#10;    const results = await Promise.all(&#10;      files.map(async (file) =&gt; {&#10;        // Dosyayı temp olarak kaydet&#10;        const buffer = Buffer.from(await file.arrayBuffer());&#10;        const tempFileName = `${uuidv4()}_temp`;&#10;        const tempFilePath = join(uploadDir, tempFileName);&#10;        &#10;        await writeFile(tempFilePath, buffer);&#10;        &#10;        // WebP'ye dönüştür&#10;        const result = await WebPService.convertToWebP(tempFilePath, {&#10;          quality,&#10;          width,&#10;          height,&#10;          generateThumbnail,&#10;          outputDir: uploadDir,&#10;        });&#10;        &#10;        // Temp dosyasını sil&#10;        await import('fs').then(fs =&gt; fs.promises.unlink(tempFilePath));&#10;        &#10;        return result;&#10;      })&#10;    );&#10;    &#10;    return NextResponse.json({&#10;      success: true,&#10;      results,&#10;    });&#10;  } catch (error: any) {&#10;    console.error('Dosya yükleme hatası:', error);&#10;    &#10;    return NextResponse.json(&#10;      { error: `Dosya yükleme hatası: ${error.message}` },&#10;      { status: 500 }&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/atoms/optimized-image/OptimizedImage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/atoms/optimized-image/OptimizedImage.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState } from 'react';&#10;import Image, { ImageProps } from 'next/image';&#10;import { cn } from '@/utils/cn';&#10;&#10;interface OptimizedImageProps extends Omit&lt;ImageProps, 'onLoadingComplete'&gt; {&#10;  fallback?: string;&#10;  className?: string;&#10;  containerClassName?: string;&#10;  aspectRatio?: string; // Örneğin: &quot;16/9&quot;, &quot;4/3&quot;, &quot;1/1&quot;&#10;  objectPosition?: string;&#10;  loadingStyle?: 'blur' | 'shimmer' | 'none';&#10;  onLoad?: () =&gt; void;&#10;}&#10;&#10;/**&#10; * WebP formatını destekleyen optimize edilmiş görsel bileşeni&#10; * Next.js Image bileşenini kullanarak otomatik WebP dönüşümü sağlar&#10; */&#10;export const OptimizedImage = ({&#10;  src,&#10;  alt,&#10;  width,&#10;  height,&#10;  fallback,&#10;  className = '',&#10;  containerClassName = '',&#10;  aspectRatio,&#10;  objectPosition = 'center',&#10;  loadingStyle = 'shimmer',&#10;  onLoad,&#10;  ...props&#10;}: OptimizedImageProps) =&gt; {&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [error, setError] = useState(false);&#10;&#10;  // Yerel veya harici URL olup olmadığını kontrol et&#10;  const isExternal = typeof src === 'string' &amp;&amp; (src.startsWith('http') || src.startsWith('//'));&#10;&#10;  // Shimmer efekti için base64 SVG&#10;  const shimmer = (w: number, h: number) =&gt; `&#10;    &lt;svg width=&quot;${w}&quot; height=&quot;${h}&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&#10;      &lt;defs&gt;&#10;        &lt;linearGradient id=&quot;g&quot;&gt;&#10;          &lt;stop stop-color=&quot;#f6f7f8&quot; offset=&quot;0%&quot; /&gt;&#10;          &lt;stop stop-color=&quot;#edeef1&quot; offset=&quot;20%&quot; /&gt;&#10;          &lt;stop stop-color=&quot;#f6f7f8&quot; offset=&quot;40%&quot; /&gt;&#10;          &lt;stop stop-color=&quot;#f6f7f8&quot; offset=&quot;100%&quot; /&gt;&#10;        &lt;/linearGradient&gt;&#10;      &lt;/defs&gt;&#10;      &lt;rect width=&quot;${w}&quot; height=&quot;${h}&quot; fill=&quot;#f6f7f8&quot; /&gt;&#10;      &lt;rect id=&quot;r&quot; width=&quot;${w}&quot; height=&quot;${h}&quot; fill=&quot;url(#g)&quot; /&gt;&#10;      &lt;animate xlink:href=&quot;#r&quot; attributeName=&quot;x&quot; from=&quot;-${w}&quot; to=&quot;${w}&quot; dur=&quot;1s&quot; repeatCount=&quot;indefinite&quot;  /&gt;&#10;    &lt;/svg&gt;`;&#10;&#10;  const toBase64 = (str: string) =&gt; typeof window === 'undefined' &#10;    ? Buffer.from(str).toString('base64') &#10;    : window.btoa(str);&#10;&#10;  // Placeholder için blur veya shimmer&#10;  const getPlaceholder = () =&gt; {&#10;    if (loadingStyle === 'blur') return 'blur';&#10;    if (loadingStyle === 'shimmer') return `data:image/svg+xml;base64,${toBase64(shimmer(700, 475))}`;&#10;    return 'empty';&#10;  };&#10;&#10;  return (&#10;    &lt;div &#10;      className={cn(&#10;        'overflow-hidden relative', &#10;        isLoading &amp;&amp; 'animate-pulse bg-gray-200',&#10;        aspectRatio &amp;&amp; `aspect-[${aspectRatio}]`,&#10;        containerClassName&#10;      )}&#10;    &gt;&#10;      {!error ? (&#10;        &lt;Image&#10;          src={src}&#10;          alt={alt}&#10;          width={width}&#10;          height={height}&#10;          className={cn(&#10;            'transition-opacity duration-300',&#10;            isLoading ? 'opacity-0' : 'opacity-100',&#10;            className&#10;          )}&#10;          style={{ &#10;            objectFit: props.fill ? 'cover' : 'contain', &#10;            objectPosition &#10;          }}&#10;          onLoadingComplete={() =&gt; {&#10;            setIsLoading(false);&#10;            onLoad?.();&#10;          }}&#10;          onError={() =&gt; {&#10;            if (fallback) {&#10;              setError(true);&#10;            }&#10;          }}&#10;          placeholder={getPlaceholder() as any}&#10;          blurDataURL={loadingStyle === 'blur' ? undefined : getPlaceholder() as string}&#10;          {...props}&#10;        /&gt;&#10;      ) : (&#10;        // Fallback image if the original image fails to load&#10;        &lt;Image&#10;          src={fallback || '/images/placeholder.webp'}&#10;          alt={`${alt} (fallback)`}&#10;          width={width}&#10;          height={height}&#10;          className={className}&#10;          style={{ &#10;            objectFit: props.fill ? 'cover' : 'contain', &#10;            objectPosition &#10;          }}&#10;          {...props}&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/atoms/tooltip/Tooltip.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/atoms/tooltip/Tooltip.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/molecules/image-upload/WebPUploader.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/molecules/image-upload/WebPUploader.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState, useCallback } from 'react';&#10;import { useDropzone } from 'react-dropzone';&#10;import { Upload, X, FileImage, AlertCircle, CheckCircle } from 'lucide-react';&#10;import { OptimizedImage } from '@/components/atoms/optimized-image/OptimizedImage';&#10;&#10;interface UploadResult {&#10;  webpPath: string;&#10;  thumbnailPath?: string;&#10;  width: number;&#10;  height: number;&#10;  originalSize: number;&#10;  webpSize: number;&#10;  compressionRatio: number;&#10;}&#10;&#10;interface WebPUploaderProps {&#10;  onUploadComplete?: (results: UploadResult[]) =&gt; void;&#10;  maxFiles?: number;&#10;  maxSize?: number; // Megabyte cinsinden&#10;  aspectRatio?: string; // örneğin &quot;16/9&quot;, &quot;1/1&quot;&#10;  thumbnails?: boolean;&#10;  width?: number;&#10;  height?: number;&#10;  quality?: number;&#10;  className?: string;&#10;  disabled?: boolean;&#10;  uploadEndpoint?: string; // API endpoint&#10;  initialImages?: string[]; // Başlangıçta gösterilecek resim URL'leri&#10;  showStatistics?: boolean;&#10;}&#10;&#10;export default function WebPUploader({&#10;  onUploadComplete,&#10;  maxFiles = 5,&#10;  maxSize = 10, // 10MB default&#10;  aspectRatio,&#10;  thumbnails = true,&#10;  width,&#10;  height,&#10;  quality = 85,&#10;  className = '',&#10;  disabled = false,&#10;  uploadEndpoint = '/api/upload/webp',&#10;  initialImages = [],&#10;  showStatistics = false,&#10;}: WebPUploaderProps) {&#10;  const [files, setFiles] = useState&lt;File[]&gt;([]);&#10;  const [uploads, setUploads] = useState&lt;UploadResult[]&gt;([]);&#10;  const [previews, setPreviews] = useState&lt;string[]&gt;(initialImages);&#10;  const [isUploading, setIsUploading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null);&#10;&#10;  const maxSizeBytes = maxSize * 1024 * 1024; // MB to bytes&#10;  &#10;  const onDrop = useCallback(async (acceptedFiles: File[]) =&gt; {&#10;    if (disabled) return;&#10;    &#10;    // Maximum dosya sayısı kontrolü&#10;    if (previews.length + acceptedFiles.length &gt; maxFiles) {&#10;      setError(`En fazla ${maxFiles} dosya yükleyebilirsiniz.`);&#10;      return;&#10;    }&#10;&#10;    setError(null);&#10;    setSuccess(null);&#10;    setIsUploading(true);&#10;    &#10;    // Seçilen dosyaları kaydet&#10;    setFiles(prev =&gt; [...prev, ...acceptedFiles]);&#10;    &#10;    // Dosyaları yükle ve WebP'ye dönüştür&#10;    try {&#10;      // Önizleme URL'leri oluştur&#10;      const newPreviews = acceptedFiles.map(file =&gt; URL.createObjectURL(file));&#10;      setPreviews(prev =&gt; [...prev, ...newPreviews]);&#10;      &#10;      // Form verisine dosyaları ekle&#10;      const formData = new FormData();&#10;      acceptedFiles.forEach(file =&gt; {&#10;        formData.append('files', file);&#10;      });&#10;      &#10;      // Parametreleri ekle&#10;      if (width) formData.append('width', width.toString());&#10;      if (height) formData.append('height', height.toString());&#10;      if (quality) formData.append('quality', quality.toString());&#10;      if (thumbnails) formData.append('generateThumbnail', 'true');&#10;      &#10;      // API'ye yükle&#10;      const response = await fetch(uploadEndpoint, {&#10;        method: 'POST',&#10;        body: formData&#10;      });&#10;      &#10;      if (!response.ok) {&#10;        throw new Error(`Yükleme hatası: ${response.statusText}`);&#10;      }&#10;      &#10;      const data = await response.json();&#10;      setUploads(prev =&gt; [...prev, ...data.results]);&#10;      &#10;      setSuccess(`${data.results.length} dosya başarıyla yüklendi.`);&#10;      &#10;      // Callback fonksiyonu çağır&#10;      if (onUploadComplete) {&#10;        onUploadComplete(data.results);&#10;      }&#10;    } catch (err: any) {&#10;      setError(`Yükleme hatası: ${err.message}`);&#10;      console.error('Yükleme hatası:', err);&#10;    } finally {&#10;      setIsUploading(false);&#10;    }&#10;  }, [disabled, maxFiles, previews.length, width, height, quality, thumbnails, uploadEndpoint, onUploadComplete]);&#10;&#10;  const { getRootProps, getInputProps, isDragActive, fileRejections } = useDropzone({&#10;    onDrop,&#10;    accept: {&#10;      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp', '.tiff']&#10;    },&#10;    maxSize: maxSizeBytes,&#10;    disabled: isUploading || disabled,&#10;    maxFiles&#10;  });&#10;  &#10;  // Bir önizlemeyi kaldır&#10;  const removePreview = (index: number) =&gt; {&#10;    // URL nesnesini temizle&#10;    if (previews[index].startsWith('blob:')) {&#10;      URL.revokeObjectURL(previews[index]);&#10;    }&#10;    &#10;    // Dizilerden kaldır&#10;    setPreviews(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    setFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    &#10;    // Yüklemeler dizisinden de kaldır&#10;    if (index &lt; uploads.length) {&#10;      setUploads(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;    }&#10;  };&#10;  &#10;  // Dosya red nedenlerini göster&#10;  const fileRejectionItems = fileRejections.map(({ file, errors }) =&gt; (&#10;    &lt;div key={file.name} className=&quot;text-sm text-red-600 mt-2&quot;&gt;&#10;      &lt;p className=&quot;font-semibold&quot;&gt;{file.name}&lt;/p&gt;&#10;      &lt;ul className=&quot;list-disc pl-5&quot;&gt;&#10;        {errors.map(e =&gt; (&#10;          &lt;li key={e.code}&gt;{e.code === 'file-too-large' &#10;            ? `Dosya boyutu çok büyük (${(file.size / (1024 * 1024)).toFixed(2)}MB). Maksimum ${maxSize}MB olabilir.` &#10;            : e.message}&#10;          &lt;/li&gt;&#10;        ))}&#10;      &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;  ));&#10;&#10;  return (&#10;    &lt;div className={`w-full ${className}`}&gt;&#10;      {/* Dosya yükleme alanı */}&#10;      &lt;div &#10;        {...getRootProps()} &#10;        className={`border-2 border-dashed rounded-lg p-6 cursor-pointer transition-colors &#10;          ${isDragActive &#10;            ? 'border-blue-500 bg-blue-50' &#10;            : 'border-gray-300 hover:border-gray-400 bg-gray-50'&#10;          } ${disabled ? 'opacity-60 cursor-not-allowed' : ''}`}&#10;      &gt;&#10;        &lt;input {...getInputProps()} /&gt;&#10;        &lt;div className=&quot;flex flex-col items-center justify-center text-center&quot;&gt;&#10;          &lt;Upload className=&quot;w-12 h-12 text-gray-400 mb-3&quot; /&gt;&#10;          &lt;p className=&quot;text-lg font-medium text-gray-700&quot;&gt;&#10;            {isDragActive &#10;              ? 'Dosyaları buraya bırakın...' &#10;              : 'WebP dönüşümü için görselleri buraya sürükleyin veya seçin'}&#10;          &lt;/p&gt;&#10;          &lt;p className=&quot;mt-2 text-sm text-gray-500&quot;&gt;&#10;            {isUploading &#10;              ? 'Dosyalar yükleniyor ve WebP formatına dönüştürülüyor...' &#10;              : `Her biri en fazla ${maxSize}MB olan ${maxFiles} dosyaya kadar yükleyebilirsiniz.`}&#10;          &lt;/p&gt;&#10;          {!isUploading &amp;&amp; (&#10;            &lt;p className=&quot;mt-1 text-xs text-gray-400&quot;&gt;&#10;              Desteklenen formatlar: JPG, PNG, GIF, BMP, TIFF&#10;            &lt;/p&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &#10;      {/* Hatalar */}&#10;      {(error || fileRejectionItems.length &gt; 0) &amp;&amp; (&#10;        &lt;div className=&quot;mt-3 p-3 bg-red-50 border border-red-200 rounded-md&quot;&gt;&#10;          {error &amp;&amp; (&#10;            &lt;div className=&quot;flex items-center text-red-700 mb-2&quot;&gt;&#10;              &lt;AlertCircle className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;              &lt;span&gt;{error}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {fileRejectionItems}&#10;        &lt;/div&gt;&#10;      )}&#10;      &#10;      {/* Başarı mesajı */}&#10;      {success &amp;&amp; (&#10;        &lt;div className=&quot;mt-3 p-3 bg-green-50 border border-green-200 rounded-md flex items-center text-green-700&quot;&gt;&#10;          &lt;CheckCircle className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;          &lt;span&gt;{success}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      &#10;      {/* Önizleme alanı */}&#10;      {previews.length &gt; 0 &amp;&amp; (&#10;        &lt;div className=&quot;mt-4&quot;&gt;&#10;          &lt;h4 className=&quot;text-sm font-semibold text-gray-700 mb-2&quot;&gt;Yüklenen Görseller&lt;/h4&gt;&#10;          &lt;div className=&quot;grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4&quot;&gt;&#10;            {previews.map((preview, index) =&gt; (&#10;              &lt;div key={index} className=&quot;relative group&quot;&gt;&#10;                &lt;div &#10;                  className={`border rounded-lg overflow-hidden bg-gray-100 ${&#10;                    aspectRatio ? `aspect-[${aspectRatio}]` : 'aspect-[4/3]'&#10;                  }`}&#10;                &gt;&#10;                  {/* Yüklenen görsel preview için OptimizedImage bileşenini kullan */}&#10;                  &lt;OptimizedImage&#10;                    src={preview}&#10;                    alt={`Yüklenen görsel ${index + 1}`}&#10;                    fill&#10;                    className=&quot;object-cover&quot;&#10;                    sizes=&quot;(max-width: 768px) 100vw, 33vw&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &#10;                {/* İstatistikler */}&#10;                {showStatistics &amp;&amp; uploads[index] &amp;&amp; (&#10;                  &lt;div className=&quot;mt-1 text-xs text-gray-500&quot;&gt;&#10;                    &lt;p&gt;Boyut: {uploads[index].width}x{uploads[index].height}&lt;/p&gt;&#10;                    &lt;p&gt;&#10;                      Kazanç: {uploads[index].compressionRatio}% &#10;                      ({(uploads[index].originalSize / (1024 * 1024)).toFixed(2)}MB → &#10;                      {(uploads[index].webpSize / (1024 * 1024)).toFixed(2)}MB)&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;                &#10;                {/* Silme butonu */}&#10;                &lt;button&#10;                  onClick={() =&gt; removePreview(index)}&#10;                  className=&quot;absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity shadow-md&quot;&#10;                  title=&quot;Görseli kaldır&quot;&#10;                &gt;&#10;                  &lt;X className=&quot;w-4 h-4&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/organisms/sidebar/Sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/organisms/sidebar/Sidebar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useSession, signOut } from &quot;next-auth/react&quot;;&#10;import { motion, AnimatePresence } from &quot;framer-motion&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Calendar,&#10;  Users,&#10;  Camera,&#10;  Package,&#10;  FileImage,&#10;  Settings,&#10;  BarChart3,&#10;  MessageSquare,&#10;  CreditCard,&#10;  Bell,&#10;  HelpCircle,&#10;  LogOut,&#10;  ChevronLeft,&#10;  ChevronRight,&#10;  ChevronDown,&#10;  Home,&#10;  UserCog,&#10;  Shield,&#10;  TrendingUp,&#10;  Zap,&#10;  Plus,&#10;  FolderPlus,&#10;  MapPin,&#10;  UserCheck,&#10;  Menu,&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface SidebarItem {&#10;  key: string;&#10;  label: string;&#10;  icon: React.ReactNode;&#10;  href: string;&#10;  badge?: number;&#10;  children?: SidebarItem[];&#10;  description?: string;&#10;  isNew?: boolean;&#10;  isPro?: boolean;&#10;}&#10;&#10;interface AdminSidebarProps {&#10;  collapsed?: boolean;&#10;  onToggle?: (collapsed: boolean) =&gt; void;&#10;  className?: string;&#10;  isMobile?: boolean;&#10;}&#10;&#10;export default function AdminSidebar({&#10;  collapsed = false,&#10;  onToggle,&#10;  className = &quot;&quot;,&#10;  isMobile = false,&#10;}: AdminSidebarProps) {&#10;  const [isCollapsed, setIsCollapsed] = useState(collapsed);&#10;  const [openGroups, setOpenGroups] = useState&lt;string[]&gt;([]);&#10;  const pathname = usePathname();&#10;  const { data: session } = useSession();&#10;  const [isMounted, setIsMounted] = useState(false);&#10;&#10;  // Hydration için effect&#10;  useEffect(() =&gt; {&#10;    setIsMounted(true);&#10;    // URL'ye göre ilgili menü grubunu otomatik aç&#10;    const matchingGroup = sidebarItems.find((item) =&gt;&#10;      item.children?.some((child) =&gt; pathname?.startsWith(child.href))&#10;    );&#10;    if (matchingGroup) {&#10;      setOpenGroups((prev) =&gt; [...prev, matchingGroup.key]);&#10;    }&#10;  }, []);&#10;&#10;  // Mock data for badges (replace with tRPC hooks when endpoints are ready)&#10;  const reservationsCount = 8;&#10;  const pendingReservations = 3;&#10;  const newMessages = 5;&#10;&#10;  const handleToggle = () =&gt; {&#10;    const newCollapsed = !isCollapsed;&#10;    setIsCollapsed(newCollapsed);&#10;    onToggle?.(newCollapsed);&#10;  };&#10;&#10;  const toggleGroup = (key: string) =&gt; {&#10;    setOpenGroups((prev) =&gt;&#10;      prev.includes(key) ? prev.filter((k) =&gt; k !== key) : [...prev, key]&#10;    );&#10;  };&#10;&#10;  const handleSignOut = async () =&gt; {&#10;    await signOut({ callbackUrl: &quot;/&quot; });&#10;  };&#10;&#10;  const sidebarItems: SidebarItem[] = [&#10;    {&#10;      key: &quot;dashboard&quot;,&#10;      label: &quot;Dashboard&quot;,&#10;      icon: &lt;LayoutDashboard className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/dashboard&quot;,&#10;      description: &quot;Genel bakış ve istatistikler&quot;,&#10;    },&#10;    {&#10;      key: &quot;reservations&quot;,&#10;      label: &quot;Rezervasyonlar&quot;,&#10;      icon: &lt;Calendar className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/calendar&quot;,&#10;      badge: reservationsCount,&#10;      description: &quot;Aktif rezervasyonlar&quot;,&#10;      isNew: true,&#10;    },&#10;    {&#10;      key: &quot;locations&quot;,&#10;      label: &quot;Lokasyonlar&quot;,&#10;      icon: &lt;MapPin className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/location&quot;,&#10;      description: &quot;Çekim lokasyonları&quot;,&#10;    },&#10;    {&#10;      key: &quot;staff&quot;,&#10;      label: &quot;Personel&quot;,&#10;      icon: &lt;UserCheck className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/staff&quot;,&#10;      description: &quot;Personel yönetimi&quot;,&#10;    },&#10;    {&#10;      key: &quot;customers&quot;,&#10;      label: &quot;Müşteriler&quot;,&#10;      icon: &lt;Users className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/customers&quot;,&#10;      badge: newMessages &gt; 0 ? newMessages : undefined,&#10;      description: &quot;Müşteri veritabanı&quot;,&#10;    },&#10;    {&#10;      key: &quot;messages&quot;,&#10;      label: &quot;İletişim Mesajları&quot;,&#10;      icon: &lt;MessageSquare className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/messages&quot;,&#10;      description: &quot;İletişim formu mesajları&quot;,&#10;    },&#10;    {&#10;      key: &quot;packages&quot;,&#10;      label: &quot;Paket Yönetimi&quot;,&#10;      icon: &lt;Package className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/packages&quot;,&#10;      description: &quot;Hizmet paketleri&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;packagesManagement&quot;,&#10;          label: &quot;Paket İşlemleri&quot;,&#10;          icon: &lt;Package className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages&quot;,&#10;          description: &quot;Paket listesi ve düzenleme&quot;,&#10;        },&#10;        {&#10;          key: &quot;addOnServices&quot;,&#10;          label: &quot;Ek Hizmet İşlemleri&quot;,&#10;          icon: &lt;Plus className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/addOns&quot;,&#10;          description: &quot;Ek hizmet yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;categoryManagement&quot;,&#10;          label: &quot;Kategori İşlemleri&quot;,&#10;          icon: &lt;FolderPlus className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/category&quot;,&#10;          description: &quot;Kategori yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;announcements&quot;,&#10;          label: &quot;Kampanya Duyuruları&quot;,&#10;          icon: &lt;Bell className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/announcements&quot;,&#10;          description: &quot;Duyuru yönetimi&quot;,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;gallery&quot;,&#10;      label: &quot;Galeri&quot;,&#10;      icon: &lt;Camera className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/gallery&quot;,&#10;      description: &quot;Fotoğraf koleksiyonu&quot;,&#10;    },&#10;    {&#10;      key: &quot;analytics&quot;,&#10;      label: &quot;Analitik&quot;,&#10;      icon: &lt;TrendingUp className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/analytics&quot;,&#10;      description: &quot;Performans metrikleri&quot;,&#10;      isPro: true,&#10;      children: [&#10;        {&#10;          key: &quot;reports&quot;,&#10;          label: &quot;Raporlar&quot;,&#10;          icon: &lt;BarChart3 className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/analytics/report&quot;,&#10;          description: &quot;Detaylı raporlar&quot;,&#10;        },&#10;        {&#10;          key: &quot;insights&quot;,&#10;          label: &quot;İçgörüler&quot;,&#10;          icon: &lt;Zap className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/analytics/insight&quot;,&#10;          description: &quot;AI destekli analiz&quot;,&#10;          isPro: true,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;finance&quot;,&#10;      label: &quot;Finansal&quot;,&#10;      icon: &lt;CreditCard className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/finance&quot;,&#10;      description: &quot;Gelir ve giderler&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;payments&quot;,&#10;          label: &quot;Ödemeler&quot;,&#10;          icon: &lt;CreditCard className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/finance/payments&quot;,&#10;          badge: pendingReservations &gt; 0 ? pendingReservations : undefined,&#10;          description: &quot;Ödeme takibi&quot;,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;system&quot;,&#10;      label: &quot;Sistem&quot;,&#10;      icon: &lt;Settings className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/settings&quot;,&#10;      description: &quot;Sistem ayarları&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;users&quot;,&#10;          label: &quot;Kullanıcılar&quot;,&#10;          icon: &lt;UserCog className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/settings/users&quot;,&#10;          description: &quot;Kullanıcı yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;settings&quot;,&#10;          label: &quot;Ayarlar&quot;,&#10;          icon: &lt;Settings className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/settings&quot;,&#10;          description: &quot;Genel ayarlar&quot;,&#10;        },&#10;      ],&#10;    },&#10;  ];&#10;&#10;  const isActive = (href: string) =&gt; {&#10;    if (!pathname) return false;&#10;    if (href === &quot;/admin&quot;) {&#10;      return pathname === &quot;/admin&quot;;&#10;    }&#10;    return pathname.startsWith(href);&#10;  };&#10;&#10;  const hasActiveChild = (item: SidebarItem): boolean =&gt; {&#10;    if (!item.children) return false;&#10;    return item.children.some((child) =&gt; isActive(child.href));&#10;  };&#10;&#10;  // Animasyon varyantları&#10;  const sidebarVariants = {&#10;    expanded: { width: &quot;18rem&quot; },&#10;    collapsed: { width: &quot;5rem&quot; },&#10;  };&#10;&#10;  const childVariants = {&#10;    hidden: { opacity: 0, height: 0 },&#10;    visible: {&#10;      opacity: 1,&#10;      height: &quot;auto&quot;,&#10;      transition: {&#10;        duration: 0.3,&#10;      },&#10;    },&#10;  };&#10;&#10;  const renderSidebarItem = (item: SidebarItem, level = 0) =&gt; {&#10;    const active = isActive(item.href);&#10;    const hasChildren = item.children &amp;&amp; item.children.length &gt; 0;&#10;    const isGroupOpen = openGroups.includes(item.key);&#10;    const hasActiveChildren = hasActiveChild(item);&#10;&#10;    // Aktif menünün renklerini ve stilleri&#10;    const activeClassNames =&#10;      &quot;bg-gradient-to-r from-orange-900/30 to-orange-800/20 text-orange-400 shadow-md border-l-2 border-orange-500&quot;;&#10;    const inactiveClassNames =&#10;      &quot;text-gray-300 hover:bg-gray-800/70 hover:text-white hover:shadow-sm&quot;;&#10;&#10;    // Aktif menü simgesi renkleri&#10;    const activeIconClassNames = &quot;text-orange-400&quot;;&#10;    const inactiveIconClassNames = &quot;text-gray-400 group-hover:text-gray-200&quot;;&#10;&#10;    if (hasChildren) {&#10;      return (&#10;        &lt;div key={item.key} className=&quot;mb-1.5&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; toggleGroup(item.key)}&#10;            className={`w-full flex items-center justify-between px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 group ${&#10;              hasActiveChildren || active&#10;                ? activeClassNames&#10;                : inactiveClassNames&#10;            }`}&#10;            aria-expanded={isGroupOpen}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center flex-1&quot;&gt;&#10;              &lt;div&#10;                className={`transition-colors duration-200 ${&#10;                  hasActiveChildren || active&#10;                    ? activeIconClassNames&#10;                    : inactiveIconClassNames&#10;                }`}&#10;              &gt;&#10;                {item.icon}&#10;              &lt;/div&gt;&#10;&#10;              {!isCollapsed &amp;&amp; (&#10;                &lt;div className=&quot;flex-1 ml-3&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{item.label}&lt;/span&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      {item.isPro &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-amber-600/50 to-orange-700/50 text-orange-300 ring-1 ring-orange-500/30&quot;&gt;&#10;                          PRO&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {item.isNew &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-green-600/50 to-emerald-700/50 text-emerald-300 ring-1 ring-green-500/30&quot;&gt;&#10;                          YENİ&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {item.badge &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center justify-center min-w-[20px] h-5 px-1.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-orange-500 to-amber-600 text-white shadow-sm&quot;&gt;&#10;                          {item.badge}&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  {item.description &amp;&amp; (&#10;                    &lt;p className=&quot;text-xs text-gray-400 mt-0.5 line-clamp-1&quot;&gt;&#10;                      {item.description}&#10;                    &lt;/p&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;ChevronDown&#10;                className={`w-4 h-4 transition-transform duration-300 ml-2 ${&#10;                  isGroupOpen ? &quot;rotate-180&quot; : &quot;&quot;&#10;                } ${hasActiveChildren || active ? &quot;text-orange-500&quot; : &quot;text-gray-400&quot;}`}&#10;              /&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;&#10;          &lt;AnimatePresence&gt;&#10;            {!isCollapsed &amp;&amp; isGroupOpen &amp;&amp; (&#10;              &lt;motion.div&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;visible&quot;&#10;                exit=&quot;hidden&quot;&#10;                variants={childVariants}&#10;                className=&quot;ml-5 mt-1 space-y-1 border-l border-gray-700/50 pl-3 overflow-hidden&quot;&#10;              &gt;&#10;                {item.children?.map((child) =&gt; renderSidebarItem(child, level + 1))}&#10;              &lt;/motion.div&gt;&#10;            )}&#10;          &lt;/AnimatePresence&gt;&#10;        &lt;/div&gt;&#10;      );&#10;    }&#10;&#10;    return (&#10;      &lt;div key={item.key} className=&quot;mb-1.5&quot;&gt;&#10;        &lt;Link&#10;          href={item.href}&#10;          className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 group ${&#10;            active ? activeClassNames : inactiveClassNames&#10;          } ${level &gt; 0 ? &quot;text-xs py-2&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;div&#10;            className={`transition-colors duration-200 ${&#10;              active ? activeIconClassNames : inactiveIconClassNames&#10;            }`}&#10;          &gt;&#10;            {item.icon}&#10;          &lt;/div&gt;&#10;&#10;          {!isCollapsed &amp;&amp; (&#10;            &lt;div className=&quot;flex-1 ml-3&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span className=&quot;font-medium&quot;&gt;{item.label}&lt;/span&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  {item.isPro &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-amber-600/50 to-orange-700/50 text-orange-300 ring-1 ring-orange-500/30&quot;&gt;&#10;                      PRO&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {item.isNew &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-green-600/50 to-emerald-700/50 text-emerald-300 ring-1 ring-green-500/30&quot;&gt;&#10;                      YENİ&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {item.badge &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center justify-center min-w-[20px] h-5 px-1.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-orange-500 to-amber-600 text-white shadow-sm&quot;&gt;&#10;                      {item.badge}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              {item.description &amp;&amp; level === 0 &amp;&amp; (&#10;                &lt;p className=&quot;text-xs text-gray-400 mt-0.5 line-clamp-1&quot;&gt;&#10;                  {item.description}&#10;                &lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/Link&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Sidebar içeriğini sadece client-side render edilen durumda göster&#10;  if (!isMounted &amp;&amp; typeof window === &quot;undefined&quot;) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;motion.div&#10;      variants={sidebarVariants}&#10;      animate={isCollapsed ? &quot;collapsed&quot; : &quot;expanded&quot;}&#10;      transition={{ duration: 0.3, ease: &quot;easeInOut&quot; }}&#10;      className={`bg-gradient-to-b from-gray-950 to-black border-r border-gray-800/50 flex flex-col h-full shadow-xl ${className}`}&#10;      style={{&#10;        backdropFilter: &quot;blur(8px)&quot;,&#10;        WebkitBackdropFilter: &quot;blur(8px)&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;p-5 border-b border-gray-800/50 bg-gradient-to-r from-gray-900 to-black&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-orange-400 to-orange-600 rounded-lg flex items-center justify-center shadow-lg ring-2 ring-orange-500/30&quot;&gt;&#10;              &lt;Camera className=&quot;w-5 h-5 text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300&quot;&gt;&#10;                  Admin Panel&#10;                &lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-gray-400 font-medium&quot;&gt;&#10;                  Fotomandalin&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;button&#10;            onClick={handleToggle}&#10;            className=&quot;p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800/70 transition-colors duration-200&quot;&#10;            aria-label={isCollapsed ? &quot;Expand sidebar&quot; : &quot;Collapse sidebar&quot;}&#10;          &gt;&#10;            {isCollapsed ? (&#10;              &lt;ChevronRight className=&quot;w-5 h-5&quot; /&gt;&#10;            ) : (&#10;              &lt;ChevronLeft className=&quot;w-5 h-5&quot; /&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation */}&#10;      &lt;div className=&quot;flex-1 overflow-y-auto py-5 px-3&quot;&gt;&#10;        &lt;nav className=&quot;space-y-1&quot;&gt;&#10;          {sidebarItems.map((item) =&gt; renderSidebarItem(item))}&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Footer */}&#10;      &lt;div className=&quot;p-4 border-t border-gray-800/50 bg-gray-950/80&quot;&gt;&#10;        {session?.user &amp;&amp; (&#10;          &lt;div&#10;            className={`flex items-center ${&#10;              isCollapsed ? &quot;justify-center&quot; : &quot;justify-between&quot;&#10;            }`}&#10;          &gt;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                &lt;div className=&quot;w-10 h-10 rounded-full bg-gray-800 flex items-center justify-center text-orange-400 font-semibold uppercase&quot;&gt;&#10;                  {session.user.name?.charAt(0) || &quot;U&quot;}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;h3 className=&quot;text-sm font-medium text-white truncate&quot;&gt;&#10;                    {session.user.name}&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-400 truncate&quot;&gt;&#10;                    {session.user.email}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;button&#10;              onClick={handleSignOut}&#10;              className=&quot;p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800 transition-colors&quot;&#10;              aria-label=&quot;Çıkış yap&quot;&#10;              title=&quot;Çıkış yap&quot;&#10;            &gt;&#10;              &lt;LogOut className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { useSession, signOut } from &quot;next-auth/react&quot;;&#10;import { motion, AnimatePresence } from &quot;framer-motion&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Calendar,&#10;  Users,&#10;  Camera,&#10;  Package,&#10;  FileImage,&#10;  Settings,&#10;  BarChart3,&#10;  MessageSquare,&#10;  CreditCard,&#10;  Bell,&#10;  HelpCircle,&#10;  LogOut,&#10;  ChevronLeft,&#10;  ChevronRight,&#10;  ChevronDown,&#10;  Home,&#10;  UserCog,&#10;  Shield,&#10;  TrendingUp,&#10;  Zap,&#10;  Plus,&#10;  FolderPlus,&#10;  MapPin,&#10;  UserCheck,&#10;  Menu,&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface SidebarItem {&#10;  key: string;&#10;  label: string;&#10;  icon: React.ReactNode;&#10;  href: string;&#10;  badge?: number;&#10;  children?: SidebarItem[];&#10;  description?: string;&#10;  isNew?: boolean;&#10;  isPro?: boolean;&#10;}&#10;&#10;interface AdminSidebarProps {&#10;  collapsed?: boolean;&#10;  onToggle?: (collapsed: boolean) =&gt; void;&#10;  className?: string;&#10;  isMobile?: boolean;&#10;}&#10;&#10;export default function AdminSidebar({&#10;  collapsed = false,&#10;  onToggle,&#10;  className = &quot;&quot;,&#10;  isMobile = false,&#10;}: AdminSidebarProps) {&#10;  const [isCollapsed, setIsCollapsed] = useState(collapsed);&#10;  const [openGroups, setOpenGroups] = useState&lt;string[]&gt;([]);&#10;  const pathname = usePathname();&#10;  const { data: session } = useSession();&#10;  const [isMounted, setIsMounted] = useState(false);&#10;&#10;  // Hydration için effect&#10;  useEffect(() =&gt; {&#10;    setIsMounted(true);&#10;    // URL'ye göre ilgili menü grubunu otomatik aç&#10;    const matchingGroup = sidebarItems.find((item) =&gt;&#10;      item.children?.some((child) =&gt; pathname?.startsWith(child.href))&#10;    );&#10;    if (matchingGroup) {&#10;      setOpenGroups((prev) =&gt; [...prev, matchingGroup.key]);&#10;    }&#10;  }, []);&#10;&#10;  // Mock data for badges (replace with tRPC hooks when endpoints are ready)&#10;  const reservationsCount = 8;&#10;  const pendingReservations = 3;&#10;  const newMessages = 5;&#10;&#10;  const handleToggle = () =&gt; {&#10;    const newCollapsed = !isCollapsed;&#10;    setIsCollapsed(newCollapsed);&#10;    onToggle?.(newCollapsed);&#10;  };&#10;&#10;  const toggleGroup = (key: string) =&gt; {&#10;    setOpenGroups((prev) =&gt;&#10;      prev.includes(key) ? prev.filter((k) =&gt; k !== key) : [...prev, key]&#10;    );&#10;  };&#10;&#10;  const handleSignOut = async () =&gt; {&#10;    await signOut({ callbackUrl: &quot;/&quot; });&#10;  };&#10;&#10;  const sidebarItems: SidebarItem[] = [&#10;    {&#10;      key: &quot;dashboard&quot;,&#10;      label: &quot;Dashboard&quot;,&#10;      icon: &lt;LayoutDashboard className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/dashboard&quot;,&#10;      description: &quot;Genel bakış ve istatistikler&quot;,&#10;    },&#10;    {&#10;      key: &quot;reservations&quot;,&#10;      label: &quot;Rezervasyonlar&quot;,&#10;      icon: &lt;Calendar className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/calendar&quot;,&#10;      badge: reservationsCount,&#10;      description: &quot;Aktif rezervasyonlar&quot;,&#10;      isNew: true,&#10;    },&#10;    {&#10;      key: &quot;locations&quot;,&#10;      label: &quot;Lokasyonlar&quot;,&#10;      icon: &lt;MapPin className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/location&quot;,&#10;      description: &quot;Çekim lokasyonları&quot;,&#10;    },&#10;    {&#10;      key: &quot;staff&quot;,&#10;      label: &quot;Personel&quot;,&#10;      icon: &lt;UserCheck className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/staff&quot;,&#10;      description: &quot;Personel yönetimi&quot;,&#10;    },&#10;    {&#10;      key: &quot;customers&quot;,&#10;      label: &quot;Müşteriler&quot;,&#10;      icon: &lt;Users className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/customers&quot;,&#10;      badge: newMessages &gt; 0 ? newMessages : undefined,&#10;      description: &quot;Müşteri veritabanı&quot;,&#10;    },&#10;    {&#10;      key: &quot;messages&quot;,&#10;      label: &quot;İletişim Mesajları&quot;,&#10;      icon: &lt;MessageSquare className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/messages&quot;,&#10;      description: &quot;İletişim formu mesajları&quot;,&#10;    },&#10;    {&#10;      key: &quot;packages&quot;,&#10;      label: &quot;Paket Yönetimi&quot;,&#10;      icon: &lt;Package className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/packages&quot;,&#10;      description: &quot;Hizmet paketleri&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;packagesManagement&quot;,&#10;          label: &quot;Paket İşlemleri&quot;,&#10;          icon: &lt;Package className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages&quot;,&#10;          description: &quot;Paket listesi ve düzenleme&quot;,&#10;        },&#10;        {&#10;          key: &quot;addOnServices&quot;,&#10;          label: &quot;Ek Hizmet İşlemleri&quot;,&#10;          icon: &lt;Plus className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/addOns&quot;,&#10;          description: &quot;Ek hizmet yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;categoryManagement&quot;,&#10;          label: &quot;Kategori İşlemleri&quot;,&#10;          icon: &lt;FolderPlus className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/category&quot;,&#10;          description: &quot;Kategori yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;announcements&quot;,&#10;          label: &quot;Kampanya Duyuruları&quot;,&#10;          icon: &lt;Bell className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/packages/announcements&quot;,&#10;          description: &quot;Duyuru yönetimi&quot;,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;gallery&quot;,&#10;      label: &quot;Galeri&quot;,&#10;      icon: &lt;Camera className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/gallery&quot;,&#10;      description: &quot;Fotoğraf koleksiyonu&quot;,&#10;    },&#10;    {&#10;      key: &quot;analytics&quot;,&#10;      label: &quot;Analitik&quot;,&#10;      icon: &lt;TrendingUp className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/analytics&quot;,&#10;      description: &quot;Performans metrikleri&quot;,&#10;      isPro: true,&#10;      children: [&#10;        {&#10;          key: &quot;reports&quot;,&#10;          label: &quot;Raporlar&quot;,&#10;          icon: &lt;BarChart3 className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/analytics/report&quot;,&#10;          description: &quot;Detaylı raporlar&quot;,&#10;        },&#10;        {&#10;          key: &quot;insights&quot;,&#10;          label: &quot;İçgörüler&quot;,&#10;          icon: &lt;Zap className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/analytics/insight&quot;,&#10;          description: &quot;AI destekli analiz&quot;,&#10;          isPro: true,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;finance&quot;,&#10;      label: &quot;Finansal&quot;,&#10;      icon: &lt;CreditCard className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/finance&quot;,&#10;      description: &quot;Gelir ve giderler&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;payments&quot;,&#10;          label: &quot;Ödemeler&quot;,&#10;          icon: &lt;CreditCard className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/finance/payments&quot;,&#10;          badge: pendingReservations &gt; 0 ? pendingReservations : undefined,&#10;          description: &quot;Ödeme takibi&quot;,&#10;        },&#10;      ],&#10;    },&#10;    {&#10;      key: &quot;system&quot;,&#10;      label: &quot;Sistem&quot;,&#10;      icon: &lt;Settings className=&quot;w-5 h-5&quot; /&gt;,&#10;      href: &quot;/settings&quot;,&#10;      description: &quot;Sistem ayarları&quot;,&#10;      children: [&#10;        {&#10;          key: &quot;users&quot;,&#10;          label: &quot;Kullanıcılar&quot;,&#10;          icon: &lt;UserCog className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/settings/users&quot;,&#10;          description: &quot;Kullanıcı yönetimi&quot;,&#10;        },&#10;        {&#10;          key: &quot;settings&quot;,&#10;          label: &quot;Ayarlar&quot;,&#10;          icon: &lt;Settings className=&quot;w-4 h-4&quot; /&gt;,&#10;          href: &quot;/settings&quot;,&#10;          description: &quot;Genel ayarlar&quot;,&#10;        },&#10;      ],&#10;    },&#10;  ];&#10;&#10;  const isActive = (href: string) =&gt; {&#10;    if (!pathname) return false;&#10;    if (href === &quot;/admin&quot;) {&#10;      return pathname === &quot;/admin&quot;;&#10;    }&#10;    return pathname.startsWith(href);&#10;  };&#10;&#10;  const hasActiveChild = (item: SidebarItem): boolean =&gt; {&#10;    if (!item.children) return false;&#10;    return item.children.some((child) =&gt; isActive(child.href));&#10;  };&#10;&#10;  // Animasyon varyantları&#10;  const sidebarVariants = {&#10;    expanded: { width: &quot;18rem&quot; },&#10;    collapsed: { width: &quot;5rem&quot; },&#10;  };&#10;&#10;  const childVariants = {&#10;    hidden: { opacity: 0, height: 0 },&#10;    visible: {&#10;      opacity: 1,&#10;      height: &quot;auto&quot;,&#10;      transition: {&#10;        duration: 0.3,&#10;      },&#10;    },&#10;  };&#10;&#10;  const renderSidebarItem = (item: SidebarItem, level = 0) =&gt; {&#10;    const active = isActive(item.href);&#10;    const hasChildren = item.children &amp;&amp; item.children.length &gt; 0;&#10;    const isGroupOpen = openGroups.includes(item.key);&#10;    const hasActiveChildren = hasActiveChild(item);&#10;&#10;    // Aktif menünün renklerini ve stilleri&#10;    const activeClassNames =&#10;      &quot;bg-gradient-to-r from-orange-900/30 to-orange-800/20 text-orange-400 shadow-md border-l-2 border-orange-500&quot;;&#10;    const inactiveClassNames =&#10;      &quot;text-gray-300 hover:bg-gray-800/70 hover:text-white hover:shadow-sm&quot;;&#10;&#10;    // Aktif menü simgesi renkleri&#10;    const activeIconClassNames = &quot;text-orange-400&quot;;&#10;    const inactiveIconClassNames = &quot;text-gray-400 group-hover:text-gray-200&quot;;&#10;&#10;    if (hasChildren) {&#10;      return (&#10;        &lt;div key={item.key} className=&quot;mb-1.5&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; toggleGroup(item.key)}&#10;            className={`w-full flex items-center justify-between px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 group ${&#10;              hasActiveChildren || active&#10;                ? activeClassNames&#10;                : inactiveClassNames&#10;            }`}&#10;            aria-expanded={isGroupOpen}&#10;          &gt;&#10;            &lt;div className=&quot;flex items-center flex-1&quot;&gt;&#10;              &lt;div&#10;                className={`transition-colors duration-200 ${&#10;                  hasActiveChildren || active&#10;                    ? activeIconClassNames&#10;                    : inactiveIconClassNames&#10;                }`}&#10;              &gt;&#10;                {item.icon}&#10;              &lt;/div&gt;&#10;&#10;              {!isCollapsed &amp;&amp; (&#10;                &lt;div className=&quot;flex-1 ml-3&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{item.label}&lt;/span&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      {item.isPro &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-amber-600/50 to-orange-700/50 text-orange-300 ring-1 ring-orange-500/30&quot;&gt;&#10;                          PRO&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {item.isNew &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-green-600/50 to-emerald-700/50 text-emerald-300 ring-1 ring-green-500/30&quot;&gt;&#10;                          YENİ&#10;                        &lt;/span&gt;&#10;                      )}&#10;                      {item.badge &amp;&amp; (&#10;                        &lt;span className=&quot;inline-flex items-center justify-center min-w-[20px] h-5 px-1.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-orange-500 to-amber-600 text-white shadow-sm&quot;&gt;&#10;                          {item.badge}&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  {item.description &amp;&amp; (&#10;                    &lt;p className=&quot;text-xs text-gray-400 mt-0.5 line-clamp-1&quot;&gt;&#10;                      {item.description}&#10;                    &lt;/p&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;ChevronDown&#10;                className={`w-4 h-4 transition-transform duration-300 ml-2 ${&#10;                  isGroupOpen ? &quot;rotate-180&quot; : &quot;&quot;&#10;                } ${hasActiveChildren || active ? &quot;text-orange-500&quot; : &quot;text-gray-400&quot;}`}&#10;              /&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;&#10;          &lt;AnimatePresence&gt;&#10;            {!isCollapsed &amp;&amp; isGroupOpen &amp;&amp; (&#10;              &lt;motion.div&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;visible&quot;&#10;                exit=&quot;hidden&quot;&#10;                variants={childVariants}&#10;                className=&quot;ml-5 mt-1 space-y-1 border-l border-gray-700/50 pl-3 overflow-hidden&quot;&#10;              &gt;&#10;                {item.children?.map((child) =&gt; renderSidebarItem(child, level + 1))}&#10;              &lt;/motion.div&gt;&#10;            )}&#10;          &lt;/AnimatePresence&gt;&#10;        &lt;/div&gt;&#10;      );&#10;    }&#10;&#10;    return (&#10;      &lt;div key={item.key} className=&quot;mb-1.5&quot;&gt;&#10;        &lt;Link&#10;          href={item.href}&#10;          className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 group ${&#10;            active ? activeClassNames : inactiveClassNames&#10;          } ${level &gt; 0 ? &quot;text-xs py-2&quot; : &quot;&quot;}`}&#10;        &gt;&#10;          &lt;div&#10;            className={`transition-colors duration-200 ${&#10;              active ? activeIconClassNames : inactiveIconClassNames&#10;            }`}&#10;          &gt;&#10;            {item.icon}&#10;          &lt;/div&gt;&#10;&#10;          {!isCollapsed &amp;&amp; (&#10;            &lt;div className=&quot;flex-1 ml-3&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;span className=&quot;font-medium&quot;&gt;{item.label}&lt;/span&gt;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  {item.isPro &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-amber-600/50 to-orange-700/50 text-orange-300 ring-1 ring-orange-500/30&quot;&gt;&#10;                      PRO&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {item.isNew &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center px-1.5 py-0.5 rounded-md text-xs font-medium bg-gradient-to-r from-green-600/50 to-emerald-700/50 text-emerald-300 ring-1 ring-green-500/30&quot;&gt;&#10;                      YENİ&#10;                    &lt;/span&gt;&#10;                  )}&#10;                  {item.badge &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center justify-center min-w-[20px] h-5 px-1.5 py-0.5 rounded-full text-xs font-medium bg-gradient-to-r from-orange-500 to-amber-600 text-white shadow-sm&quot;&gt;&#10;                      {item.badge}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              {item.description &amp;&amp; level === 0 &amp;&amp; (&#10;                &lt;p className=&quot;text-xs text-gray-400 mt-0.5 line-clamp-1&quot;&gt;&#10;                  {item.description}&#10;                &lt;/p&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/Link&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Sidebar içeriğini sadece client-side render edilen durumda göster&#10;  if (!isMounted &amp;&amp; typeof window === &quot;undefined&quot;) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;motion.div&#10;      variants={sidebarVariants}&#10;      animate={isCollapsed ? &quot;collapsed&quot; : &quot;expanded&quot;}&#10;      transition={{ duration: 0.3, ease: &quot;easeInOut&quot; }}&#10;      className={`bg-gradient-to-b from-gray-950 to-black border-r border-gray-800/50 flex flex-col h-full shadow-xl ${className}`}&#10;      style={{&#10;        backdropFilter: &quot;blur(8px)&quot;,&#10;        WebkitBackdropFilter: &quot;blur(8px)&quot;,&#10;      }}&#10;    &gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;p-5 border-b border-gray-800/50 bg-gradient-to-r from-gray-900 to-black&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-orange-400 to-orange-600 rounded-lg flex items-center justify-center shadow-lg ring-2 ring-orange-500/30&quot;&gt;&#10;              &lt;Camera className=&quot;w-5 h-5 text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;div&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300&quot;&gt;&#10;                  Admin Panel&#10;                &lt;/h2&gt;&#10;                &lt;p className=&quot;text-sm text-gray-400 font-medium&quot;&gt;&#10;                  Fotomandalin&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;button&#10;            onClick={handleToggle}&#10;            className=&quot;p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800/70 transition-colors duration-200&quot;&#10;            aria-label={isCollapsed ? &quot;Expand sidebar&quot; : &quot;Collapse sidebar&quot;}&#10;          &gt;&#10;            {isCollapsed ? (&#10;              &lt;ChevronRight className=&quot;w-5 h-5&quot; /&gt;&#10;            ) : (&#10;              &lt;ChevronLeft className=&quot;w-5 h-5&quot; /&gt;&#10;            )}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation */}&#10;      &lt;div className=&quot;flex-1 overflow-y-auto py-5 px-3&quot;&gt;&#10;        &lt;nav className=&quot;space-y-1&quot;&gt;&#10;          {sidebarItems.map((item) =&gt; renderSidebarItem(item))}&#10;        &lt;/nav&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Footer */}&#10;      &lt;div className=&quot;p-4 border-t border-gray-800/50 bg-gray-950/80&quot;&gt;&#10;        {session?.user &amp;&amp; (&#10;          &lt;div&#10;            className={`flex items-center ${&#10;              isCollapsed ? &quot;justify-center&quot; : &quot;justify-between&quot;&#10;            }`}&#10;          &gt;&#10;            {!isCollapsed &amp;&amp; (&#10;              &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                &lt;div className=&quot;w-10 h-10 rounded-full bg-gray-800 flex items-center justify-center text-orange-400 font-semibold uppercase&quot;&gt;&#10;                  {session.user.name?.charAt(0) || &quot;U&quot;}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                  &lt;h3 className=&quot;text-sm font-medium text-white truncate&quot;&gt;&#10;                    {session.user.name}&#10;                  &lt;/h3&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-400 truncate&quot;&gt;&#10;                    {session.user.email}&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;button&#10;              onClick={handleSignOut}&#10;              className=&quot;p-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800 transition-colors&quot;&#10;              aria-label=&quot;Çıkış yap&quot;&#10;              title=&quot;Çıkış yap&quot;&#10;            &gt;&#10;              &lt;LogOut className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/image/image-processor.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/image/image-processor.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/image/webp-service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/image/webp-service.ts" />
              <option name="updatedContent" value="import { mkdir } from 'fs/promises';&#10;import { join, parse } from 'path';&#10;import sharp from 'sharp';&#10;import { v4 as uuidv4 } from 'uuid';&#10;&#10;interface WebPConversionOptions {&#10;  quality?: number;&#10;  width?: number;&#10;  height?: number;&#10;  fit?: keyof sharp.FitEnum;&#10;  position?: string | number;&#10;  background?: sharp.Color;&#10;  withoutEnlargement?: boolean;&#10;  generateThumbnail?: boolean;&#10;  thumbnailWidth?: number;&#10;  outputDir?: string;&#10;}&#10;&#10;interface ConversionResult {&#10;  webpPath: string;        // WebP formatındaki dosyanın yolu&#10;  thumbnailPath?: string;  // Küçük boyut (thumbnail) yolu (eğer istenirse)&#10;  width: number;           // Genişlik&#10;  height: number;          // Yükseklik&#10;  originalSize: number;    // Orijinal dosya boyutu (bytes)&#10;  webpSize: number;        // WebP dosya boyutu (bytes)&#10;  compressionRatio: number; // Sıkıştırma oranı (%)&#10;}&#10;&#10;/**&#10; * WebP dönüşüm servisi&#10; * Yüklenen veya mevcut görselleri WebP formatına dönüştürür&#10; */&#10;export class WebPService {&#10;  &#10;  /**&#10;   * Verilen bir görsel dosyasını WebP formatına dönüştürür&#10;   */&#10;  static async convertToWebP(&#10;    inputPath: string,&#10;    options: WebPConversionOptions = {}&#10;  ): Promise&lt;ConversionResult&gt; {&#10;    const {&#10;      quality = 85,&#10;      width,&#10;      height,&#10;      fit = 'cover',&#10;      position = 'center',&#10;      background = { r: 255, g: 255, b: 255, alpha: 0 },&#10;      withoutEnlargement = true,&#10;      generateThumbnail = false,&#10;      thumbnailWidth = 300,&#10;      outputDir = './public/uploads'&#10;    } = options;&#10;&#10;    // Çıktı dizininin varlığından emin ol&#10;    await mkdir(outputDir, { recursive: true });&#10;&#10;    // Benzersiz dosya ismi oluştur&#10;    const uniqueId = uuidv4();&#10;    const fileName = `${uniqueId}.webp`;&#10;    const outputPath = join(outputDir, fileName);&#10;    &#10;    // Orijinal görsel meta verilerini al&#10;    const metadata = await sharp(inputPath).metadata();&#10;    const originalSize = metadata.size || 0;&#10;    &#10;    // Dönüşüm işlemi için Sharp nesnesi oluştur&#10;    let sharpInstance = sharp(inputPath);&#10;&#10;    // Eğer boyut değiştirme isteniyorsa&#10;    if (width || height) {&#10;      sharpInstance = sharpInstance.resize({&#10;        width,&#10;        height,&#10;        fit,&#10;        position,&#10;        background,&#10;        withoutEnlargement&#10;      });&#10;    }&#10;    &#10;    // WebP formatına dönüştür&#10;    const outputBuffer = await sharpInstance&#10;      .webp({ quality })&#10;      .toBuffer({ resolveWithObject: true });&#10;      &#10;    // Dosyayı kaydet&#10;    await sharp(outputBuffer.data).toFile(outputPath);&#10;    &#10;    // WebP dosya boyutu&#10;    const webpSize = outputBuffer.info.size;&#10;    &#10;    let thumbnailPath: string | undefined;&#10;    &#10;    // Eğer küçük görsel (thumbnail) isteniyorsa&#10;    if (generateThumbnail) {&#10;      const thumbFileName = `${uniqueId}_thumb.webp`;&#10;      thumbnailPath = join(outputDir, thumbFileName);&#10;      &#10;      await sharp(inputPath)&#10;        .resize({&#10;          width: thumbnailWidth,&#10;          fit: 'cover',&#10;          withoutEnlargement: true&#10;        })&#10;        .webp({ quality })&#10;        .toFile(thumbnailPath);&#10;    }&#10;    &#10;    // Sonuçları döndür&#10;    return {&#10;      webpPath: outputPath.replace('./public', ''),&#10;      thumbnailPath: thumbnailPath ? thumbnailPath.replace('./public', '') : undefined,&#10;      width: outputBuffer.info.width,&#10;      height: outputBuffer.info.height,&#10;      originalSize,&#10;      webpSize,&#10;      compressionRatio: Math.round((1 - (webpSize / originalSize)) * 100)&#10;    };&#10;  }&#10;  &#10;  /**&#10;   * Buffer'dan WebP formatına dönüştürür&#10;   */&#10;  static async convertBufferToWebP(&#10;    buffer: Buffer,&#10;    options: WebPConversionOptions = {}&#10;  ): Promise&lt;ConversionResult&gt; {&#10;    const {&#10;      quality = 85,&#10;      width,&#10;      height,&#10;      fit = 'cover',&#10;      position = 'center',&#10;      background = { r: 255, g: 255, b: 255, alpha: 0 },&#10;      withoutEnlargement = true,&#10;      generateThumbnail = false,&#10;      thumbnailWidth = 300,&#10;      outputDir = './public/uploads'&#10;    } = options;&#10;&#10;    // Çıktı dizininin varlığından emin ol&#10;    await mkdir(outputDir, { recursive: true });&#10;&#10;    // Benzersiz dosya ismi oluştur&#10;    const uniqueId = uuidv4();&#10;    const fileName = `${uniqueId}.webp`;&#10;    const outputPath = join(outputDir, fileName);&#10;    &#10;    // Orijinal buffer meta verilerini al&#10;    const metadata = await sharp(buffer).metadata();&#10;    const originalSize = buffer.length;&#10;    &#10;    // Dönüşüm işlemi için Sharp nesnesi oluştur&#10;    let sharpInstance = sharp(buffer);&#10;&#10;    // Eğer boyut değiştirme isteniyorsa&#10;    if (width || height) {&#10;      sharpInstance = sharpInstance.resize({&#10;        width,&#10;        height,&#10;        fit,&#10;        position,&#10;        background,&#10;        withoutEnlargement&#10;      });&#10;    }&#10;    &#10;    // WebP formatına dönüştür&#10;    const outputBuffer = await sharpInstance&#10;      .webp({ quality })&#10;      .toBuffer({ resolveWithObject: true });&#10;      &#10;    // Dosyayı kaydet&#10;    await sharp(outputBuffer.data).toFile(outputPath);&#10;    &#10;    // WebP dosya boyutu&#10;    const webpSize = outputBuffer.info.size;&#10;    &#10;    let thumbnailPath: string | undefined;&#10;    &#10;    // Eğer küçük görsel (thumbnail) isteniyorsa&#10;    if (generateThumbnail) {&#10;      const thumbFileName = `${uniqueId}_thumb.webp`;&#10;      thumbnailPath = join(outputDir, thumbFileName);&#10;      &#10;      await sharp(buffer)&#10;        .resize({&#10;          width: thumbnailWidth,&#10;          fit: 'cover',&#10;          withoutEnlargement: true&#10;        })&#10;        .webp({ quality })&#10;        .toFile(thumbnailPath);&#10;    }&#10;    &#10;    // Sonuçları döndür&#10;    return {&#10;      webpPath: outputPath.replace('./public', ''),&#10;      thumbnailPath: thumbnailPath ? thumbnailPath.replace('./public', '') : undefined,&#10;      width: outputBuffer.info.width,&#10;      height: outputBuffer.info.height,&#10;      originalSize,&#10;      webpSize,&#10;      compressionRatio: Math.round((1 - (webpSize / originalSize)) * 100)&#10;    };&#10;  }&#10;  &#10;  /**&#10;   * Mevcut bir görsel URL'sini WebP formatına dönüştürür (harici URL'ler için)&#10;   */&#10;  static async convertUrlToWebP(&#10;    url: string,&#10;    options: WebPConversionOptions = {}&#10;  ): Promise&lt;ConversionResult&gt; {&#10;    // Fetch API ile dosyayı indir&#10;    const response = await fetch(url);&#10;    const arrayBuffer = await response.arrayBuffer();&#10;    const buffer = Buffer.from(arrayBuffer);&#10;    &#10;    // Buffer'ı WebP'ye dönüştür&#10;    return this.convertBufferToWebP(buffer, options);&#10;  }&#10;  &#10;  /**&#10;   * Tarayıcıdan yüklenen dosyayı WebP formatına dönüştürür&#10;   */&#10;  static async convertFormFileToWebP(&#10;    file: File,&#10;    options: WebPConversionOptions = {}&#10;  ): Promise&lt;ConversionResult&gt; {&#10;    const arrayBuffer = await file.arrayBuffer();&#10;    const buffer = Buffer.from(arrayBuffer);&#10;    &#10;    return this.convertBufferToWebP(buffer, options);&#10;  }&#10;}&#10;&#10;export default WebPService;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/file-utils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/file-utils.ts" />
              <option name="updatedContent" value="import { stat, access } from 'fs/promises';&#10;import { constants } from 'fs';&#10;&#10;/**&#10; * Belirtilen dosya yolunun var olup olmadığını kontrol eder&#10; */&#10;export async function fileExists(filePath: string): Promise&lt;boolean&gt; {&#10;  try {&#10;    await access(filePath, constants.F_OK);&#10;    return true;&#10;  } catch {&#10;    return false;&#10;  }&#10;}&#10;&#10;/**&#10; * Dosya boyutunu kilobayt cinsinden döndürür&#10; */&#10;export async function getFileSizeInKB(filePath: string): Promise&lt;number&gt; {&#10;  try {&#10;    const stats = await stat(filePath);&#10;    return Math.round(stats.size / 1024);&#10;  } catch {&#10;    return 0;&#10;  }&#10;}&#10;&#10;/**&#10; * URL'den dosya adını çıkarır&#10; */&#10;export function getFileNameFromUrl(url: string): string {&#10;  if (!url) return '';&#10;  return url.split('/').pop() || '';&#10;}&#10;&#10;/**&#10; * Megabyte'ı byte'a çevirir&#10; */&#10;export function mbToBytes(mb: number): number {&#10;  return mb * 1024 * 1024;&#10;}&#10;&#10;/**&#10; * Byte'ı megabyte'a çevirir&#10; */&#10;export function bytesToMb(bytes: number): number {&#10;  return bytes / (1024 * 1024);&#10;}&#10;&#10;/**&#10; * Byte'ı insan tarafından okunabilir formata çevirir&#10; */&#10;export function formatBytes(bytes: number, decimals = 2): string {&#10;  if (bytes === 0) return '0 Bytes';&#10;&#10;  const k = 1024;&#10;  const dm = decimals &lt; 0 ? 0 : decimals;&#10;  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];&#10;&#10;  const i = Math.floor(Math.log(bytes) / Math.log(k));&#10;&#10;  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];&#10;}&#10;&#10;/**&#10; * Dosya türünü MIME tipinden kontrol eder&#10; */&#10;export function isImageFile(mimeType: string): boolean {&#10;  return mimeType.startsWith('image/');&#10;}&#10;&#10;/**&#10; * Dosya uzantısından MIME tipini tahmin eder&#10; */&#10;export function getMimeTypeFromExtension(extension: string): string | null {&#10;  const mimeTypes: Record&lt;string, string&gt; = {&#10;    'jpg': 'image/jpeg',&#10;    'jpeg': 'image/jpeg',&#10;    'png': 'image/png',&#10;    'gif': 'image/gif',&#10;    'webp': 'image/webp',&#10;    'bmp': 'image/bmp',&#10;    'tiff': 'image/tiff'&#10;  };&#10;  &#10;  const ext = extension.toLowerCase().replace('.', '');&#10;  return mimeTypes[ext] || null;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>